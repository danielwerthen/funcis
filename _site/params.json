{"name":"Funcis","tagline":"Simple functionalism","body":"Funcis\r\n======\r\n\r\nIn short, **Func.is** is about simplicity.  It's main ambition is to make app to app communication dead simple.\r\n\r\nThe idea is, to expose a certain set of functions in each distinct app, or *node*, and allow scripts to define flows of information between these functions.  What the framework does, in essence, is to execute and pass along the results of these functions.\r\n\r\n\r\nInstallation\r\n============\r\n\r\nGiven that you have a nice enough version of Node and Npm\r\nInstall via npm:\r\n\r\n\t$ npm install funcis\r\n\r\nUsage\r\n=====\r\n\r\nA *app.js* file:\r\n\r\n```js\r\nvar funcis = require('funcis')\r\n\t, app = funcis();\r\n\r\nvar node = app.node('Node');\r\nnode.functions.add('Add', function (arg1, arg2, next) {\r\n\tnext(arg1 + arg2);\r\n});\r\nnode.functions.add('Print', function (val, next) {\r\n\tconsole.log(val);\r\n});\r\n\r\napp.script('addition');\r\n```\r\n\r\nA *addition.is* file: ('.is' is the default extension to script files)\r\n\r\n\tNode.Add(5, 5)\r\n\t\t(res) =>\r\n\t\t\tNode.Print(res)\r\n\r\nLet's extend this with a second *node* in another app.\r\n*NodeA.js*:\r\n\r\n```js\r\nvar funcis = require('funcis')\r\n\t, http = require('http')\r\n\t, app = funcis();\r\n\r\nvar nodea = app.node('NodeA');\r\nnodea.functions.add('Add', function (arg1, arg2, cb) {\r\n\tcb(arg1 + arg2);\r\n});\r\n\r\nhttp.createServer(app.listen()).listen(5001);\r\n\r\nvar nodeb = app.connect({ host: 'localhost', port: 5000 });\r\nnodeb.addNode('NodeB');\r\n\r\napp.script('addition');\r\n\r\n\r\n```\r\n\r\n*NodeB.js*:\r\n\r\n```js\r\nvar funcis = require('funcis')\r\n\t, http = require('http')\r\n\t, app = funcis();\r\n\r\nvar nodeb = app.node('NodeB');\r\nnodeb.functions.add('Print', function (val, cb) {\r\n\tconsole.log(val);\r\n});\r\n\r\nhttp.createServer(app.listen()).listen(5000);\r\n\r\nvar nodea = app.connect({ host: 'localhost', port: 5001 });\r\nnodea.addNode('NodeA');\r\n\r\napp.script('addition');\r\n```\r\n\r\nWe also need to update *addition.is*:\r\n\r\n```\r\nNodeA.Add(5,5)\r\n\t(res)\r\n\t\tNodeB.Print(res)\r\n```\r\n\r\nScripting\r\n=========\r\n\r\nThe current script syntax is heavily influenced by Javascript with a little bit of lambda dashed onto it.\r\n\r\n\tNode.Function(arg1, arg2)\r\n\t\t(err, res) =>\r\n\t\t\tNode.Function(err, res)\r\n\r\nIf a function returns nothing the second argument definition may be omitted.\r\n\r\n\tNode.Function(arg1)\r\n\t\tNode.Function(arg2)\r\n\r\nExcept for passing argument references like `arg1` one can also pass constant json objects, array, strings and number.\r\n\r\n\tNode.Function(\"Number\", 35, \"Array\", [ 12, 24, 35 ], \"And objects\", { key: \"value\" })\r\n\r\nWe can also define constants and give them a name, which allows for easy reuse.\r\n\r\n\tlet pi = 3.14159265358979323846264338327950\r\n\r\n\tNode.Calc(5, pi)\r\n\t\t(res) =>\r\n\t\t\tNode.Equal(res, pi)\r\n\r\nIt is also possible to declare function chains this way, or *continuations*.\r\n\r\n\tlet Join = (err, res)\r\n\t\tNode.Match(err, res)\r\n\t\t\t(OK) =>\r\n\t\t\t\tNode.Report(OK, res)\r\n\r\n\tNode.Request()\r\n\t\t(data) =>\r\n\t\t\tNode.Split(data)\r\n\t\t\t\t(err, item) =>\r\n\t\t\t\t\tJoin(err, item)\r\n\t\t\tNode.Split(data)\r\n\t\t\t\t(err, item) =>\r\n\t\t\t\t\tJoin(err, item)\r\n\r\nThis is practically the same thing as if the `Join` *continuation* would have been written in place, however repeated.\r\n\r\nThe part in front of the function name is called the *selector* and is used to resolve the affected nodes.  In the examples above it is simply a *node* name.  The *node* name is supposedly unique, but there can also be one or more *class* names inherit to a *node*.  This kind of *selector* is signified with a `.`.\r\n\r\n\t.Class.Func1()\r\n\t\t\r\nSeveral *class* names may be combined to specify the *node* query.  \r\n\t\r\n\t.ClassA.ClassB.Func()\r\n\r\nThe `!` character signifies that a specific *class* name should be omitted.\r\n\r\n\t.IncludeClassA!ExcludeClassB.Func()\r\n\r\nIf the selector resolves into several *nodes* the function call will be executed in each and every one of these *nodes* concurrently.\r\n","google":"UA-38890336-1","note":"Don't delete this file! It's used internally to help with page regeneration."}